remove.packages("irrCAC", lib="~/R/win-library/3.5")
devtools::install_github("kgwet/irrCAC")
library(irrCAC)
library(irrCAC)
Sys.setenv(R_GSCMD = "C:\\Program Files\\gs\\gs9.27\\bin\\gswin64c.exe")
library(irrCAC)
load("F:/CloudComputing/Rpackages/irrCAC/data/cac.dist.g1g2.RData")
View(cac.dist.g1g2)
library(devtools)
document()
library(irrCAC)
shiny::runApp('F:/CloudComputing/render/emaillapp')
source('F:/CloudComputing/testapp/email/app.R')
runApp('F:/CloudComputing/testapp/email')
install.packages("sendmailR")
runApp('F:/CloudComputing/testapp/email')
runApp('F:/CloudComputing/testapp/email')
runApp('F:/CloudComputing/testapp/email')
library(shinyjs)
library(shinyjs)
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),
p(id = "text", "This text will disappear after 3 seconds"),
actionButton("close", "Close the app in half a second")
),
server = function(input, output) {
delay(3000, hide("text"))
observeEvent(input$close, {
delay(500, stopApp())
})
}
)
}
library(shinyjs)
if (interactive()) {
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),
p(id = "text", "This text will disappear after 3 seconds"),
actionButton("close", "Close the app in half a second")
),
server = function(input, output) {
delay(3000, hide("text"))
observeEvent(input$close, {
delay(500, stopApp())
})
}
)
}
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),
p(id = "text", "This text will disappear after 3 seconds"),
actionButton("close", "Close the app in half a second")
),
server = function(input, output) {
delay(3000, hide("text"))
observeEvent(input$close, {
delay(500, stopApp())
})
}
)
library(shiny)
shinyApp(
ui = fluidPage(
useShinyjs(),
p(id = "text", "This text will disappear after 3 seconds"),
actionButton("close", "Close the app in half a second")
),
server = function(input, output) {
delay(3000, hide("text"))
observeEvent(input$close, {
delay(500, stopApp())
})
}
)
library(shinyjs)
library(shiny)
library(shiny)
shinyApp(
ui <- fluidPage(
textInput(inputId = "text",
label = "To see how quickly..."),
textOutput(outputId = "text")
),
server <- function(input, output, session) {
text_input <- reactive({
input$text
})
text_d <- debounce(text_input, 2000)
output$text <- renderText({
text_d()
})
}
)
library(shiny)
shinyApp(
ui <- fluidPage(
textInput(inputId = "text",
label = "To see how quickly..."),
textOutput(outputId = "text")
),
server <- function(input, output, session) {
text_input <- reactive({
input$text
})
Sys.sleep(1000)
#text_d <- debounce(text_input, 2000)
output$text <- renderText({
#text_d()
text_input
})
}
)
library(shiny)
shinyApp(
ui <- fluidPage(
textInput(inputId = "text",
label = "To see how quickly..."),
textOutput(outputId = "text")
),
server <- function(input, output, session) {
text_input <- reactive({
input$text
})
Sys.sleep(10)
#text_d <- debounce(text_input, 2000)
output$text <- renderText({
#text_d()
text_input
})
}
)
library(shiny)
shinyApp(
ui <- fluidPage(
textInput(inputId = "text",
label = "To see how quickly..."),
textOutput(outputId = "text")
),
server <- function(input, output, session) {
text_input <- reactive({
input$text
})
Sys.sleep(10)
#text_d <- debounce(text_input, 2000)
output$text <- renderText({
#text_d()
text_input
})
}
)
library(shiny)
shinyApp(
ui <- fluidPage(
textInput(inputId = "text",
label = "To see how quickly..."),
textOutput(outputId = "text")
),
server <- function(input, output, session) {
text_input <- reactive({
input$text
})
Sys.sleep(10)
#text_d <- debounce(text_input, 2000)
output$text <- renderText({
#text_d()
text_input
})
}
)
library(shiny)
shinyApp(
ui <- fluidPage(
textInput(inputId = "text",
label = "To see how quickly..."),
textOutput(outputId = "text")
),
server <- function(input, output, session) {
text_input <- reactive({
input$text
})
#Sys.sleep(10)
#text_d <- debounce(text_input, 2000)
output$text <- renderText({
#text_d()
text_input
})
}
)
library(shiny)
shinyApp(
ui <- fluidPage(
textInput(inputId = "text",
label = "To see how quickly..."),
textOutput(outputId = "text")
),
server <- function(input, output, session) {
text_input <- reactive({
input$text
})
#Sys.sleep(10)
#text_d <- debounce(text_input, 2000)
output$text <- renderText({
#text_d()
text_input()
})
}
)
library(shiny)
shinyApp(
ui <- fluidPage(
textInput(inputId = "text",
label = "To see how quickly..."),
textOutput(outputId = "text")
),
server <- function(input, output, session) {
text_input <- reactive({
input$text
})
Sys.sleep(10)
#text_d <- debounce(text_input, 2000)
output$text <- renderText({
#text_d()
text_input()
})
}
)
library(shiny)
shinyApp(
ui <- fluidPage(
textInput(inputId = "text",
label = "To see how quickly..."),
textOutput(outputId = "text")
),
server <- function(input, output, session) {
text_input <- reactive({
input$text
})
Sys.sleep(2)
#text_d <- debounce(text_input, 2000)
output$text <- renderText({
#text_d()
text_input()
})
}
)
library(shiny)
shinyApp(
ui <- fluidPage(
textInput(inputId = "text",
label = "To see how quickly..."),
textOutput(outputId = "text")
),
server <- function(input, output, session) {
text_input <- reactive({
input$text
})
Sys.sleep(15)
#text_d <- debounce(text_input, 2000)
output$text <- renderText({
#text_d()
text_input()
})
}
)
library(shiny)
shinyApp(
ui <- fluidPage(
textInput(inputId = "text",
label = "To see how quickly..."),
textOutput(outputId = "text")
),
server <- function(input, output, session) {
text_input <- reactive({
input$text
})
Sys.sleep(30)
#text_d <- debounce(text_input, 2000)
output$text <- renderText({
#text_d()
text_input()
})
}
)
library(shiny)
shinyApp(
ui <- fluidPage(
textInput(inputId = "text",
label = "To see how quickly..."),
textOutput(outputId = "text")
),
server <- function(input, output, session) {
text_input <- reactive({
input$text
})
Sys.sleep(3)
#text_d <- debounce(text_input, 2000)
output$text <- renderText({
#text_d()
text_input()
})
}
)
library(shiny)
shinyApp(
ui <- fluidPage(
textInput(inputId = "text",
label = "To see how quickly..."),
textOutput(outputId = "text")
),
server <- function(input, output, session) {
text_input <- reactive({
input$text
})
Sys.sleep(10)
#text_d <- debounce(text_input, 2000)
output$text <- renderText({
#text_d()
text_input()
})
}
)
